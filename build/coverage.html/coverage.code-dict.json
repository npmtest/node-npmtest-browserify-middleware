{"/home/travis/build/npmtest/node-npmtest-browserify-middleware/test.js":"/* istanbul instrument in package npmtest_browserify_middleware */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-browserify-middleware/lib.npmtest_browserify_middleware.js":"/* istanbul instrument in package npmtest_browserify_middleware */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_browserify_middleware = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_browserify_middleware = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-browserify-middleware/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-browserify-middleware && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_browserify_middleware */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_browserify_middleware\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_browserify_middleware.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_browserify_middleware.rollup.js'] =\n            local.assetsDict['/assets.npmtest_browserify_middleware.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_browserify_middleware.__dirname +\n                    '/lib.npmtest_browserify_middleware.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-browserify-middleware/node_modules/browserify-middleware/index.js":"'use strict';\n\nvar path = require('path');\nvar normalize = path.normalize;\nvar resolve = path.resolve;\nvar dirname = path.dirname;\nvar stat = require('fs').statSync;\n\nexports = module.exports = browserify;\nfunction browserify(path, options) {\n  if (Array.isArray(path)) {\n    return exports.modules(path, options);\n  }\n  path = resolve(path);\n  options = exports.settings.normalize(options);\n  options.noParse = options.noParse.map(function (path) {\n    if (path[0] != '.') return path; //support `['jquery']` as well as `['./src/jquery.js']`\n    return resolve(path);\n  });\n  if (stat(path).isDirectory()) {\n    return exports.directory(path, options);\n  } else {\n    return exports.file(path, options);\n  }\n}\nexports.directory = require('./lib/directory');\nexports.file = require('./lib/file');\nexports.modules = require('./lib/modules');\n\nexports.settings = require('./lib/settings');\n","/home/travis/build/npmtest/node-npmtest-browserify-middleware/node_modules/browserify-middleware/lib/directory.js":"'use strict';\n\nvar join = require('path').join;\nvar fs = require('fs');\nvar buildResponse = require('./build-response');\nvar normalize = require('./settings').normalize;\n\nmodule.exports = directory;\nfunction directory(path, options) {\n  options = normalize(options);\n  var cache = {};\n  return function (req, res, next) {\n    var p = join(path, req.path);\n    if (cache[p]) return cache[p].send(req, res, next);\n    if (options.grep.test(req.path)) {\n      fs.stat(p, function (err, stat) {\n        if (err || !stat.isFile()) return next();\n        cache[p] = buildResponse(p, options);\n        cache[p].send(req, res, next);\n      });\n    } else {\n      return next();\n    }\n  };\n}","/home/travis/build/npmtest/node-npmtest-browserify-middleware/node_modules/browserify-middleware/lib/build-response.js":"'use strict';\n\nvar Promise = require('promise');\nvar prepare = require('prepare-response');\nvar uglify = require('uglify-js');\nvar watchify = require('watchify');\nvar buildBundle = require('./build-bundle');\n\nmodule.exports = function send(path, options) {\n  var bundle = buildBundle(path, options);\n  if (!options.cache) {\n    return {\n      send: function (req, res, next) {\n        getResponse(bundle, options).send(req, res, next);\n      },\n      dispose: noop\n    };\n  } else if (options.cache === 'dynamic') {\n    var response, resolve;\n    var updatingTimeout;\n    bundle = watchify(bundle, {poll: true, delay: 0});\n    bundle.on('update', function () {\n      if (resolve) {\n        clearTimeout(updatingTimeout);\n      } else {\n        response = new Promise(function (_resolve) {\n          resolve = _resolve;\n        });\n      }\n      updatingTimeout = setTimeout(function rebuild() {\n        resolve(getResponse(bundle, options));\n        resolve = undefined;\n      }, 600);\n    });\n    response = Promise.resolve(getResponse(bundle, options));\n    return {\n      send: function (req, res, next) {\n        response.done(function (response) { response.send(req, res, next); }, next);\n      },\n      dispose: function () {\n        bundle.close();\n      }\n    };\n  } else {\n    return getResponse(bundle, options);\n  }\n}\n\nfunction getResponse(bundle, options) {\n  var headers = {'content-type': 'application/javascript'};\n  if (options.cache && options.cache !== 'dynamic') {\n    headers['cache-control'] = options.cache;\n  }\n  var response = getSource(bundle, options).then(function (src) {\n    return prepare(src, headers, {gzip: options.gzip})\n  }).then(function (response) {\n    return syncResponse = response;\n  });\n  var syncResponse;\n  return {\n    send: function (req, res, next) {\n      if (syncResponse) return syncResponse.send(req, res);\n      else return response.done(function (response) { response.send(req, res); }, next);\n    },\n    dispose: noop\n  };\n}\nfunction getSource(bundle, options) {\n  return new Promise(function (resolve, reject) {\n    bundle.bundle(function (err, src) {\n      if (err) return reject(err);\n      resolve(src);\n    });\n  }).then(function (src) {\n    src = src.toString();\n    return options.postcompile ? options.postcompile(src) : src;\n  }).then(function (src) {\n    return (options.minify && options.preminify) ? options.preminify(src) : src;\n  }).then(function (src) {\n    if (options.minify) {\n      try {\n        src = minify(src, options.minify).code;\n      } catch (ex) { } //better to just let the client fail to parse\n    }\n    return (options.minify && options.postminify) ? options.postminify(src) : src;\n  });\n}\n\nfunction minify(str, options) {\n  if (!options || typeof options !== 'object') options = {};\n  options.fromString = true;\n  return uglify.minify(str, options);\n}\n\nfunction noop() {\n}\n","/home/travis/build/npmtest/node-npmtest-browserify-middleware/node_modules/browserify-middleware/lib/build-bundle.js":"'use strict';\n\nvar browserify = require('browserify');\n\nfunction compile(path, options) {\n  var bundle = browserify({\n    noParse: options.noParse,\n    extensions: options.extensions,\n    resolve: options.resolve,\n    insertGlobals: options.insertGlobals,\n    detectGlobals: options.detectGlobals,\n    ignoreMissing: options.ignoreMissing,\n    bundleExternal: options.bundleExternal,\n    basedir: options.basedir,\n    debug: options.debug,\n    standalone: options.standalone || false,\n    cache: options.cache === 'dynamic' ? {} : undefined,\n    packageCache: options.cache === 'dynamic' ? {} : undefined\n  });\n  if (options.plugins) {\n    var plugins = options.plugins; // in the format options.plugins = [{plugin: plugin, options: options}, {plugin: plugin, options: options}, ... ]\n    for(var i = 0; i < plugins.length; i++) {\n      var obj = plugins[i];\n      bundle.plugin(obj.plugin, obj.options);\n    }\n  }\n  if (Array.isArray(path)) {\n    for (var i = 0; i < path.length; i++) {\n      if (typeof path[i] === 'object') { // obj spec support; i.e. {\"jquery\": {options...}}\n        var spec = path[i];\n        var keys = Object.keys(spec);\n        keys.forEach(function (key) {\n          if (spec[key].run) {\n            bundle.add(key, spec[key]);\n          } else {\n            bundle.require(key, spec[key]);\n          }\n        })\n      } else {\n        bundle.require(path[i]);\n      }\n    }\n  } else {\n    bundle.add(path);\n  }\n  for (var i = 0; i < (options.external || []).length; i++) {\n    bundle.external(options.external[i]);\n  }\n  for (var i = 0; i < (options.ignore || []).length; i++) {\n    bundle.ignore(options.ignore[i]);\n  }\n  for (var i = 0; i < (options.transform || []).length; i++) {\n    var transform = options.transform[i];\n\n    if (Array.isArray(transform)) {\n      bundle.transform(transform[1], transform[0]);\n    } else {\n      bundle.transform(transform);\n    }\n  }\n  return bundle;\n}\n\nmodule.exports = compile\n","/home/travis/build/npmtest/node-npmtest-browserify-middleware/node_modules/browserify-middleware/lib/settings.js":"var ms = require('ms');\n\nvar reservedKeys = ['normalize', 'env', 'mode'];\n\nexports = module.exports = setter();\nexports.env = env;\nexports.mode = process.env.NODE_ENV || 'development';\n\n\nfunction env(name) {\n  if (exports[name]) {\n    return exports[name];\n  }\n  reservedKeys.push(name);\n  return exports[name] = setter();\n}\nfunction setter(obj) {\n  obj = obj || set;\n  function set(key) {\n    if (arguments.length === 2) {\n      obj[key] = arguments[1];\n      return this;\n    } else if (typeof key === 'object') {\n      Object.keys(key)\n        .forEach(function (k) {\n          obj[k] = key[k];\n        });\n      return this;\n    } else {\n      return obj[key];\n    }\n  }\n  return set;\n}\n\nexports.external = [];\nexports.ignore = [];\nexports.ignoreMissing = false;\nexports.transform = [];\nexports.insertGlobals = false;\nexports.detectGlobals = true;\nexports.standalone = false;\nexports.noParse = [];\nexports.extensions = [];\nexports.basedir = undefined;\nexports.grep = /\\.js$/;\n\n//set some safe defaults for\n//unknown environemnts\nexports.cache = false;\nexports.minify = false;\nexports.gzip = true;\nexports.debug = false;\n\nvar production = exports.env('production');\nproduction.cache = true;\nproduction.precompile = true;\nproduction.minify = true;\nproduction.gzip = true;\nproduction.debug = false;\n\nvar development = exports.env('development');\ndevelopment.cache = 'dynamic';\ndevelopment.precompile = false;\ndevelopment.minify = false;\ndevelopment.gzip = false;\ndevelopment.debug = true;\n\nexports.normalize = normalize;\n\n\nfunction normalize(options) {\n  var defaults = exports[exports.mode] || {};\n  options = options || {};\n\n  Object.keys(defaults)\n    .forEach(function (key) {\n      if (options[key] === null || options[key] === undefined) {\n        options[key] = defaults[key];\n      }\n    });\n  Object.keys(exports)\n    .forEach(function (key) {\n      if (reservedKeys.indexOf(key) === -1 && (options[key] === null || options[key] === undefined)) {\n        options[key] = exports[key];\n      }\n    });\n\n\n  if (options.cache === 'dynamic') {\n    // leave unchanged\n  } else if (typeof options.cache === 'string' && ms(options.cache)) {\n    options.cache = 'public, max-age=' + Math.floor(ms(options.cache)/1000);\n  } else if (options.cache === true) {\n    options.cache = 'public, max-age=60';\n  } else if (typeof options.cache === 'number') {\n    options.cache = 'public, max-age=' + Math.floor(options.cache/1000);\n  } else if (typeof options.cache === 'object') {\n    options.cache = (options.cache.private ? 'private' : 'public') + ', max-age='\n                  + Math.floor(ms(options.cache.maxAge.toString())/1000);\n  }\n\n  options.precompile = !!options.precompile;\n  options.external = arrayify(options.external);\n  options.ignore = arrayify(options.ignore);\n  options.transform = arrayify(options.transform);\n  options.noParse = arrayify(options.noParse);\n  options.extensions = arrayify(options.extensions);\n\n  return options;\n}\n\nfunction arrayify(val) {\n  if (val && !Array.isArray(val) && typeof val !== 'boolean') {\n    return [val];\n  } else {\n    return val;\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-browserify-middleware/node_modules/browserify-middleware/lib/file.js":"'use strict';\n\nvar buildResponse = require('./build-response');\nvar normalize = require('./settings').normalize;\n\nmodule.exports = directory;\nfunction directory(path, options) {\n  options = normalize(options);\n  var response = buildResponse(path, options);\n  return function (req, res, next) {\n    response.send(req, res, next);\n  };\n}","/home/travis/build/npmtest/node-npmtest-browserify-middleware/node_modules/browserify-middleware/lib/modules.js":"'use strict';\n\nvar buildResponse = require('./build-response');\nvar normalize = require('./settings').normalize;\n\nmodule.exports = modules;\nfunction modules(modules, options) {\n  options = normalize(options);\n  if (options.external) {\n    options.external = options.external\n      .filter(function (name) {\n        return modules.indexOf(name) === -1;\n      });\n  }\n  var response = buildResponse(modules, options);\n  return function (req, res, next) {\n    response.send(req, res, next);\n  };\n}"}